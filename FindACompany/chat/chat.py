from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import json

from .chatgpt import ask_gpt
from .functions import create_event, delete_event, update_event, create_event_from_website

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"]
)

class ChatRequest(BaseModel):
    message: str

@app.post("/chat")
async def chat_endpoint(req: ChatRequest):
    print(f"\nüì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {req.message}")
    gpt_response = await ask_gpt(req.message)
    print(f"ü§ñ –û—Ç–≤–µ—Ç –æ—Ç GPT: {gpt_response}")

    if "function_call" in gpt_response:
        name = gpt_response["function_call"]["name"]
        args_json = gpt_response["function_call"]["arguments"]
        print(f"‚öôÔ∏è GPT –≤—ã–∑–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é: {name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args_json}")

        try:
            args = json.loads(args_json)
            if name == "create_event":
                result = create_event(**args)
            elif name == "delete_event":
                result = delete_event(**args)
            elif name == "update_event":
                result = update_event(**args)
            elif name == "create_event_from_link":
                result = create_event_from_website(**args)
            else:
                result = f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {name}"
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result}")
            return {"reply": result}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ {name}: {e}")
            return {"reply": f"–û—à–∏–±–∫–∞: {str(e)}"}
    return {"reply": gpt_response["reply"]}
