import requests
from bs4 import BeautifulSoup
import openai
import json
import re

# Firebase Admin SDK
import firebase_admin
from firebase_admin import credentials, firestore
from ../ka.env import *

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin (—É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ serviceAccountKey.json)
if not firebase_admin._apps:
    cred = credentials.Certificate("C:/Users/User/Desktop/PROJECT-main/serviceAccountKey.json")
    firebase_admin.initialize_app(cred)
db = firestore.client()     

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = API_KEY
client = openai.OpenAI(api_key=openai.api_key)

def extract_full_text(url: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –∏–∑ HTML.
    """
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL: {url}. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
    soup = BeautifulSoup(response.text, 'html.parser')
    return soup.get_text(separator="\n", strip=True)

def remove_code_fence(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç markdown-–æ–±—ë—Ä—Ç–∫—É –≤–∏–¥–∞ ```json ... ``` –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å.
    """
    fence_pattern = r"^```(?:json)?\s*(.*?)\s*```$"
    match = re.search(fence_pattern, text, re.DOTALL)
    if match:
        return match.group(1).strip()
    return text.strip()

def structure_event_data(text: str) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ GPT –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ GPT –≤–µ—Ä–Ω—ë—Ç JSON —Å —Ä–æ–≤–Ω–æ –ø—è—Ç—å—é –ø–æ–ª—è–º–∏:
      - title: —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
      - date: —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
      - time: —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)
      - location: —Å—Ç—Ä–æ–∫–∞ (–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è)
      - description: —Å—Ç—Ä–æ–∫–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—è.
    """
    prompt = (
        "–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å —Ä–æ–≤–Ω–æ "
        "—Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:\n"
        "- title: —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)\n"
        "- date: —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\n"
        "- time: —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)\n"
        "- location: —Å—Ç—Ä–æ–∫–∞ (–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è)\n"
        "- description: —Å—Ç—Ä–æ–∫–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)\n\n"
        "–í–∞–∂–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∏–∫–∞–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–≤. "
        "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –¥–ª—è –ø–æ–ª—è –≤–µ—Ä–Ω–∏ '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'.\n\n"
        "–¢–µ–∫—Å—Ç:\n" + text
    )
    
    response = client.chat.completions.create(
         model="gpt-4-1106-preview",
         messages=[
             {
                 "role": "system",
                 "content": (
                     "–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏–∑ –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. "
                     "–í–æ–∑–≤—Ä–∞—â–∞–π —Ä–æ–≤–Ω–æ –ø—è—Ç—å –ø–æ–ª–µ–π: title, date, time, location –∏ description, –∫–∞–∂–¥–æ–µ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π. "
                     "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'."
                 )
             },
             {"role": "user", "content": prompt}
         ]
    )
    
    content = response.choices[0].message.content
    content_clean = remove_code_fence(content)
    try:
         data = json.loads(content_clean)
         for key in ["title", "date", "time", "location", "description"]:
             if key not in data or not isinstance(data[key], str) or not data[key].strip():
                 data[key] = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
         return data
    except Exception as e:
         raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç GPT –∫–∞–∫ JSON. –û—Ç–≤–µ—Ç: {content_clean}")

def create_event_from_website(url: str) -> str:
    try:
        full_text = extract_full_text(url)
        event_data = structure_event_data(full_text)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è Firestore
        event_doc = {
            "title": event_data.get("title", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "date": event_data.get("date", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "time": event_data.get("time", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "location": event_data.get("location", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "description": event_data.get("description", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "createdAt": firestore.SERVER_TIMESTAMP
        }
        db.collection("events").add(event_doc)
        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—ç—Ç–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç–±–æ—Ç–∞)
        html_snippet = f"""
        <div class="event-card">
            <h2>{event_data.get('title')}</h2>
            <p><strong>–î–∞—Ç–∞:</strong> {event_data.get('date')}</p>
            <p><strong>–í—Ä–µ–º—è:</strong> {event_data.get('time')}</p>
            <p><strong>–ú–µ—Å—Ç–æ:</strong> {event_data.get('location')}</p>
            <p>{event_data.get('description')}</p>
        </div>
        """
        return html_snippet.strip()
    except Exception as e:
        return f"<p>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏: {str(e)}</p>"


def create_event(title: str, date: str, time: str, location: str, description: str = "", imageUrl: str = "") -> str:
    event_doc = {
        "title": title,
        "date": date,
        "time": time,
        "location": location,
        "description": description,
        "imageUrl": imageUrl,
        "createdAt": firestore.SERVER_TIMESTAMP
    }
    db.collection("events").add(event_doc)
    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML-–∫–∞—Ä—Ç–æ—á–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—ã–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ events.js)
    html_snippet = f"""
    <div class="event-card">
        {f'<img src="{imageUrl}" alt="{title}" />' if imageUrl else ""}
        <h2>{title}</h2>
        <p><strong>–î–∞—Ç–∞:</strong> {date}</p>
        <p><strong>–í—Ä–µ–º—è:</strong> {time}</p>
        <p><strong>–ú–µ—Å—Ç–æ:</strong> {location}</p>
        <p>{description}</p>
    </div>
    """
    return html_snippet.strip()



def delete_event(event_id: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID –∏–∑ Firestore.
    """
    db.collection("events").document(event_id).delete()
    return f"<p>üóëÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID {event_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ</p>"

def update_event(event_id: str, field: str, value: str) -> str:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ Firestore.
    """
    db.collection("events").document(event_id).update({field: value})
    return f"<p>‚úèÔ∏è –ü–æ–ª–µ ¬´{field}¬ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å ID {event_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ¬´{value}¬ª</p>"
  